//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof k === 'undefined') {
  k = {};
}
if (typeof k.thrift === 'undefined') {
  k.thrift = {};
}
k.thrift.AboutUs = module.exports.AboutUs = function(args) {
  this.id = null;
  this.telephone = null;
  this.website = null;
  this.qq = null;
  this.url = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.telephone !== undefined && args.telephone !== null) {
      this.telephone = args.telephone;
    }
    if (args.website !== undefined && args.website !== null) {
      this.website = args.website;
    }
    if (args.qq !== undefined && args.qq !== null) {
      this.qq = args.qq;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
k.thrift.AboutUs.prototype = {};
k.thrift.AboutUs.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.telephone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.website = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.qq = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

k.thrift.AboutUs.prototype.write = function(output) {
  output.writeStructBegin('AboutUs');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.telephone !== null && this.telephone !== undefined) {
    output.writeFieldBegin('telephone', Thrift.Type.STRING, 2);
    output.writeString(this.telephone);
    output.writeFieldEnd();
  }
  if (this.website !== null && this.website !== undefined) {
    output.writeFieldBegin('website', Thrift.Type.STRING, 3);
    output.writeString(this.website);
    output.writeFieldEnd();
  }
  if (this.qq !== null && this.qq !== undefined) {
    output.writeFieldBegin('qq', Thrift.Type.STRING, 4);
    output.writeString(this.qq);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 5);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

k.thrift.AboutUsException = module.exports.AboutUsException = function(args) {
  Thrift.TException.call(this, "k.thrift.AboutUsException")
  this.name = "k.thrift.AboutUsException"
  this.code = null;
  this.reason = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field code is unset!');
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
Thrift.inherits(k.thrift.AboutUsException, Thrift.TException);
k.thrift.AboutUsException.prototype.name = 'AboutUsException';
k.thrift.AboutUsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

k.thrift.AboutUsException.prototype.write = function(output) {
  output.writeStructBegin('AboutUsException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

